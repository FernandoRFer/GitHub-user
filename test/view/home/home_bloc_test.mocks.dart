// Mocks generated by Mockito 5.4.4 from annotations
// in open_labs/test/view/home/home_bloc_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:mockito/mockito.dart' as _i1;
import 'package:open_labs/core/helpers/global_error.dart' as _i2;
import 'package:open_labs/repository/local_data_storage/search_history_model.dart'
    as _i7;
import 'package:open_labs/repository/user_repository/model/user_model.dart'
    as _i6;
import 'package:open_labs/repository/user_repository/user_repository.dart'
    as _i5;

import 'home_bloc_test.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeGlobalErrorModel_0 extends _i1.SmartFake
    implements _i2.GlobalErrorModel {
  _FakeGlobalErrorModel_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [MockGlobalError].
///
/// See the documentation for Mockito's code generation for more information.
class MockMockGlobalError extends _i1.Mock implements _i3.MockGlobalError {
  MockMockGlobalError() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.GlobalErrorModel> errorHandling(
    dynamic message, [
    Object? error,
    StackTrace? stackTrace,
  ]) =>
      (super.noSuchMethod(
        Invocation.method(
          #errorHandling,
          [
            message,
            error,
            stackTrace,
          ],
        ),
        returnValue:
            _i4.Future<_i2.GlobalErrorModel>.value(_FakeGlobalErrorModel_0(
          this,
          Invocation.method(
            #errorHandling,
            [
              message,
              error,
              stackTrace,
            ],
          ),
        )),
      ) as _i4.Future<_i2.GlobalErrorModel>);
}

/// A class which mocks [UserRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockUserRepository extends _i1.Mock implements _i5.UserRepository {
  MockUserRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i6.UserModel?> getUsers(String? username) => (super.noSuchMethod(
        Invocation.method(
          #getUsers,
          [username],
        ),
        returnValue: _i4.Future<_i6.UserModel?>.value(),
      ) as _i4.Future<_i6.UserModel?>);
}

/// A class which mocks [MockDbHistory].
///
/// See the documentation for Mockito's code generation for more information.
class MockMockDbHistory extends _i1.Mock implements _i3.MockDbHistory {
  MockMockDbHistory() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<int> insert(_i7.SearchHistoryModel? searHistoryModel) =>
      (super.noSuchMethod(
        Invocation.method(
          #insert,
          [searHistoryModel],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);

  @override
  _i4.Future<List<_i7.SearchHistoryModel>> get() => (super.noSuchMethod(
        Invocation.method(
          #get,
          [],
        ),
        returnValue: _i4.Future<List<_i7.SearchHistoryModel>>.value(
            <_i7.SearchHistoryModel>[]),
      ) as _i4.Future<List<_i7.SearchHistoryModel>>);

  @override
  _i4.Future<int> remove(int? id) => (super.noSuchMethod(
        Invocation.method(
          #remove,
          [id],
        ),
        returnValue: _i4.Future<int>.value(0),
      ) as _i4.Future<int>);
}
